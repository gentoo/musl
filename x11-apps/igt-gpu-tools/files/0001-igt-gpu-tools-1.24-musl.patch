--- a/benchmarks/gem_syslatency.c
+++ b/benchmarks/gem_syslatency.c
@@ -41,10 +41,10 @@
 #include <time.h>
 #include <limits.h>
 #include "drm.h"
-
+#include "signal_compat.h"
 #include <linux/unistd.h>
 
-#define sigev_notify_thread_id _sigev_un._tid
+#define sigev_notify_thread_id sigev_notify_function
 
 static volatile int done;

--- a/lib/igt_aux.c
+++ b/lib/igt_aux.c
@@ -31,6 +31,7 @@
 #endif
 #include <stdio.h>
 #include <fcntl.h>
+#include <limits.h>
 #include <sys/stat.h>
 #include <sys/ioctl.h>
 #include <string.h>
@@ -73,6 +74,8 @@
 #include <libgen.h>   /* for dirname() */
 #endif
 
+#include "signal_compat.h"
+
 /**
  * SECTION:igt_aux
  * @short_description: Auxiliary libraries and support functions

--- a/lib/igt_aux.h
+++ b/lib/igt_aux.h
@@ -46,7 +46,7 @@
 #  define gettid() (pid_t)(syscall(__NR_gettid))
 # endif
 #endif
-#define sigev_notify_thread_id _sigev_un._tid
+#define sigev_notify_thread_id sigev_notify_function
 
 /* auxialiary igt helpers from igt_aux.c */
 /* generally useful helpers */

--- a/lib/igt_halffloat.c
+++ b/lib/igt_halffloat.c
@@ -162,7 +162,7 @@
 	return fi.f;
 }
 
-#if defined(__x86_64__) && !defined(__clang__)
+#if defined(__x86_64__) && !defined(__clang__) && defined(__GLIBC__)
 #pragma GCC push_options
 #pragma GCC target("f16c")

--- a/lib/igt_x86.c
+++ b/lib/igt_x86.c
@@ -190,7 +190,7 @@
 }
 #endif
 
-#if defined(__x86_64__) && !defined(__clang__)
+#if defined(__x86_64__) && !defined(__clang__) && defined(__GLIBC__)
 #pragma GCC push_options
 #pragma GCC target("sse4.1")
 #pragma GCC diagnostic ignored "-Wpointer-arith"

--- /dev/null
+++ b/lib/signal_compat.h
@@ -0,0 +1,8 @@
+#define SIGEV_SIGNAL 0
+#define SIGEV_NONE 1
+#define SIGEV_THREAD 2
+
+#define SIGEV_SIGNAL    0       /* notify via signal */
+#define SIGEV_NONE      1       /* other notification: meaningless */
+#define SIGEV_THREAD    2       /* deliver via thread creation */
+#define SIGEV_THREAD_ID 4       /* deliver to thread */

--- a/tests/drm_read.c
+++ b/tests/drm_read.c
@@ -220,7 +220,7 @@
 		pthread_mutex_unlock(&w.mutex);
 
 		/* Give each thread a chance to sleep in drm_read() */
-		pthread_yield();
+		sched_yield();
 
 		/* One event should wake all threads as none consume */
 		generate_event(w.fd, pipe);

--- a/tests/kms_hdmi_inject.c
+++ b/tests/kms_hdmi_inject.c
@@ -26,6 +26,7 @@
 
 #include <dirent.h>
 
+#include <limits.h>
 #include "igt.h"
 #include "igt_edid.h"
 #include "igt_eld.h"

--- a/tests/kms_sysfs_edid_timing.c
+++ b/tests/kms_sysfs_edid_timing.c
@@ -24,6 +24,7 @@
 
 #include <dirent.h>
 #include <fcntl.h>
+#include <limits.h>
 #include <sys/stat.h>
 
 #define THRESHOLD_PER_CONNECTOR	10

--- a/tools/aubdump.c
+++ b/tools/aubdump.c
@@ -226,10 +226,10 @@
 };
 
 static int close_init_helper(int fd);
-static int ioctl_init_helper(int fd, unsigned long request, ...);
+static int ioctl_init_helper(int fd, int request, ...);
 
 static int (*libc_close)(int fd) = close_init_helper;
-static int (*libc_ioctl)(int fd, unsigned long request, ...) = ioctl_init_helper;
+static int (*libc_ioctl)(int fd, int request, ...) = ioctl_init_helper;
 
 static int drm_fd = -1;
 static char *filename = NULL;
@@ -856,7 +856,7 @@
 }
 
 static int
-gem_ioctl(int fd, unsigned long request, void *argp)
+gem_ioctl(int fd, int request, void *argp)
 {
 	int ret;
 
@@ -1150,7 +1150,7 @@
     DRM_IOWR(DRM_COMMAND_BASE + DRM_I915_GEM_EXECBUFFER2, struct drm_i915_gem_execbuffer2)
 
 int
-ioctl(int fd, unsigned long request, ...)
+ioctl(int fd, int request, ...)
 {
 	va_list args;
 	void *argp;
@@ -1290,7 +1290,7 @@
 }
 
 static int
-ioctl_init_helper(int fd, unsigned long request, ...)
+ioctl_init_helper(int fd, int request, ...)
 {
 	va_list args;
 	void *argp;

--- a/lib/igt_eld.c
+++ b/lib/igt_eld.c
@@ -29,6 +29,7 @@
 #include <stdint.h>
 #include <stdio.h>
 #include <string.h>
+#include <limits.h>
 
 #include "igt_core.h"
 #include "igt_eld.h"