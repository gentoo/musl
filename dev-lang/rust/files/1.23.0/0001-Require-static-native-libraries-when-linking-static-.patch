From abd07ed6ab514ef00d450640a659861af06f308e Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Fri, 8 Sep 2017 00:05:18 -0500
Subject: [PATCH 1/8] Require static native libraries when linking static
 executables

---
 src/librustc_trans/back/link.rs | 13 ++++++++++---
 1 file changed, 10 insertions(+), 3 deletions(-)

diff --git a/src/librustc_trans/back/link.rs b/src/librustc_trans/back/link.rs
index e0eef1f576..e46b25f987 100644
--- a/src/librustc_trans/back/link.rs
+++ b/src/librustc_trans/back/link.rs
@@ -1302,8 +1302,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker,
     }
 }
 
-// Link in all of our upstream crates' native dependencies. Remember that
-// all of these upstream native dependencies are all non-static
+// Link in all of our upstream crates' native dependencies. Remember that when
+// linking libraries, these upstream native dependencies are all non-static
 // dependencies. We've got two cases then:
 //
 // 1. The upstream crate is an rlib. In this case we *must* link in the
@@ -1343,7 +1343,14 @@ fn add_upstream_native_libraries(cmd: &mut Linker,
                 continue
             }
             match lib.kind {
-                NativeLibraryKind::NativeUnknown => cmd.link_dylib(&lib.name.as_str()),
+                NativeLibraryKind::NativeUnknown => {
+                    // When creating executables, match library linkage to that of the executable.
+                    if crate_type == config::CrateTypeExecutable && sess.crt_static() {
+                        cmd.link_staticlib(&lib.name.as_str())
+                    } else {
+                        cmd.link_dylib(&lib.name.as_str())
+                    }
+                },
                 NativeLibraryKind::NativeFramework => cmd.link_framework(&lib.name.as_str()),
                 NativeLibraryKind::NativeStaticNobundle => {
                     // Link "static-nobundle" native libs only if the crate they originate from
-- 
2.13.6

