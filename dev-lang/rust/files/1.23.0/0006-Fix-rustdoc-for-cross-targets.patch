From da75097b4c83ee27358136c67cdf1c9c3ba795f7 Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Sat, 2 Dec 2017 17:25:44 -0600
Subject: [PATCH 6/8] Fix rustdoc for cross targets

musl can't handle wrong-architecture libraries in LD_LIBRARY_PATH.
---
 src/bootstrap/bin/rustdoc.rs | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/src/bootstrap/bin/rustdoc.rs b/src/bootstrap/bin/rustdoc.rs
index 4e975adc97..a9df1b71ce 100644
--- a/src/bootstrap/bin/rustdoc.rs
+++ b/src/bootstrap/bin/rustdoc.rs
@@ -27,9 +27,6 @@ fn main() {
     let stage = env::var("RUSTC_STAGE").expect("RUSTC_STAGE was not set");
     let sysroot = env::var_os("RUSTC_SYSROOT").expect("RUSTC_SYSROOT was not set");
 
-    let mut dylib_path = bootstrap::util::dylib_path();
-    dylib_path.insert(0, PathBuf::from(libdir));
-
     let mut cmd = Command::new(rustdoc);
     cmd.args(&args)
         .arg("--cfg")
@@ -39,7 +36,7 @@ fn main() {
         .arg("--sysroot")
         .arg(sysroot)
         .env(bootstrap::util::dylib_path_var(),
-             env::join_paths(&dylib_path).unwrap());
+             PathBuf::from(libdir));
 
     // Force all crates compiled by this compiler to (a) be unstable and (b)
     // allow the `rustc_private` feature to link to other unstable crates
-- 
2.13.6

